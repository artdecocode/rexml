{"version":3,"sources":["../src/index.js"],"names":["execRes","re","s","res","exec","args","extractProps","propsRe","t","r","key","value","push","getPropValue","tt","replace","trim","split","filter","a","reduce","k","acc","val","test","parseInt","extractTags","tag","string","RegExp","length","_p","_c","p","props","item","content"],"mappings":";;;;;;;AAAA,MAAMA,UAAU,CAACC,EAAD,EAAKC,CAAL,KAAW;AACzB,QAAMC,MAAMF,GAAGG,IAAH,CAAQF,CAAR,CAAZ;AACA,MAAI,CAACC,GAAL,EAAU,OAAOA,GAAP;AACV,QAAM,GAAG,GAAGE,IAAN,IAAcF,GAApB;AACA,SAAOE,IAAP;AACD,CALD;;AAOA,MAAMC,eAAgBJ,CAAD,IAAO;AAC1B,QAAMK,UAAU,gBAAhB;AACA,MAAIC,CAAJ;AACA,QAAMC,IAAI,EAAV;;AACA,SAAO,CAACD,IAAID,QAAQH,IAAR,CAAaF,CAAb,CAAL,MAA0B,IAAjC,EAAuC;AACrC,UAAM,GAAGQ,GAAH,EAAQC,KAAR,IAAiBH,CAAvB;AACAC,MAAEG,IAAF,CAAO;AACLF,SADK;AAELC,aAAOE,aAAaF,KAAb;AAFF,KAAP;AAID;;AACD,QAAMG,KAAKZ,EAAEa,OAAF,CAAUR,OAAV,EAAmB,EAAnB,EAAuBS,IAAvB,GAA8BC,KAA9B,CAAoC,GAApC,EACRC,MADQ,CACDC,KAAKA,CADJ,EAERC,MAFQ,CAED,CAACD,CAAD,EAAIE,CAAJ,MAAW,EAAE,GAAGF,CAAL;AAAQ,KAACE,CAAD,GAAK;AAAb,GAAX,CAFC,EAEgC,EAFhC,CAAX;AAGA,SAAOZ,EAAEW,MAAF,CAAS,CAACE,GAAD,EAAM;AAAEZ,OAAF;AAAOC;AAAP,GAAN,MAA0B,EACxC,GAAGW,GADqC;AAExC,KAACZ,GAAD,GAAOC;AAFiC,GAA1B,CAAT,EAGHG,EAHG,CAAP;AAID,CAlBD;;AAoBA,MAAMD,eAAgBU,GAAD,IAAS;AAC5B,MAAIA,OAAO,MAAX,EAAmB,OAAO,IAAP;AACnB,MAAIA,OAAO,OAAX,EAAoB,OAAO,KAAP;;AACpB,MAAI,QAAQC,IAAR,CAAaD,GAAb,CAAJ,EAAuB;AACrB,WAAOE,SAASF,GAAT,EAAc,EAAd,CAAP;AACD;;AACD,SAAOA,GAAP;AACD,CAPD;AASA;;;;;;;;;;;;;;;;;;;AAiBO,MAAMG,cAAc,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC1C,QAAM3B,KAAK,IAAI4B,MAAJ,CAAY,IAAGF,GAAI,sCAAqCA,GAAI,KAA5D,EAAkE,GAAlE,CAAX;AACA,QAAMlB,IAAI,EAAV;AAEA,MAAID,CAAJ;;AACA,SAAQA,IAAIR,QAAQC,EAAR,EAAY2B,MAAZ,CAAZ,EAAkC;AAChC,QAAI,CAACpB,EAAEsB,MAAP,EAAe;AACf,UAAM,CAACC,KAAK,EAAN,EAAUC,KAAK,EAAf,IAAqBxB,CAA3B;;AACA,UAAMyB,IAAIF,GAAGhB,OAAH,CAAW,KAAX,EAAkB,EAAlB,EAAsBC,IAAtB,EAAV;;AACA,UAAMkB,QAAQ5B,aAAa2B,CAAb,CAAd;AACA,UAAME,OAAO;AACXD,WADW;AAEXE,eAASJ;AAFE,KAAb;AAIAvB,MAAEG,IAAF,CAAOuB,IAAP;AACD;;AACD,SAAO1B,CAAP;AACD,CAjBM;;;eAmBQiB,W","sourcesContent":["const execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\nconst extractProps = (s) => {\n  const propsRe = /(\\w+)=\"(.*?)\"/g\n  let t\n  const r = []\n  while ((t = propsRe.exec(s)) !== null) {\n    const [, key, value] = t\n    r.push({\n      key,\n      value: getPropValue(value),\n    })\n  }\n  const tt = s.replace(propsRe, '').trim().split(' ')\n    .filter(a => a)\n    .reduce((a, k) => ({ ...a, [k]: true }), {})\n  return r.reduce((acc, { key, value }) => ({\n    ...acc,\n    [key]: value,\n  }), tt)\n}\n\nconst getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\n/**\n * Extract member elements from an XML string. Numbers and booleans will be parsed into their JS types.\n * @param {string} tag Which tag to extract, e.g., `div`.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n<html>\n  <div id=\"1\" class=\"test\" contenteditable>\n    Hello World\n  </div>\n</html>\n`\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nexport const extractTags = (tag, string) => {\n  const re = new RegExp(`<${tag}( .[^>]+)?(?: /)?>(?:([\\\\s\\\\S]+?)</${tag}>)?`, 'g')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string))) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c,\n    }\n    r.push(item)\n  }\n  return r\n}\n\nexport default extractTags\n"],"file":"index.js"}