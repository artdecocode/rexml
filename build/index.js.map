{"version":3,"sources":["../src/index.js"],"names":["execRes","re","s","res","exec","args","extractTags","tag","string","end1","end2","RegExp","attributesRe","source","r","t","length","_p","_c","p","replace","trim","props","item","content","push"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,UAAU,CAACC,EAAD,EAAKC,CAAL,KAAW;AACzB,QAAMC,MAAMF,GAAGG,IAAH,CAAQF,CAAR,CAAZ;AACA,MAAI,CAACC,GAAL,EAAU,OAAOA,GAAP;AACV,QAAM,GAAG,GAAGE,IAAN,IAAcF,GAApB;AACA,SAAOE,IAAP;AACD,CALD;AAOA;;;;;;;;;;;;;;;;;;;AAiBO,MAAMC,cAAc,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC1C,QAAMC,OAAO,QAAb;AACA,QAAMC,OAAO,IAAIC,MAAJ,CAAY,mBAAkBJ,GAAI,GAAlC,CAAb;AACA,QAAMN,KAAK,IAAIU,MAAJ,CAAY,IAAGJ,GAAI,GAAEK,kBAAaC,MAAO,OAAMJ,KAAKI,MAAO,IAAGH,KAAKG,MAAO,GAA1E,EAA8E,IAA9E,CAAX;AACA,QAAMC,IAAI,EAAV;AAEA,MAAIC,CAAJ;;AACA,SAAQA,IAAIf,QAAQC,EAAR,EAAYO,MAAZ,CAAZ,EAAkC;AAChC,QAAI,CAACO,EAAEC,MAAP,EAAe;AACf,UAAM,CAACC,KAAK,EAAN,EAAUC,KAAK,EAAf,IAAqBH,CAA3B;;AACA,UAAMI,IAAIF,GAAGG,OAAH,CAAW,KAAX,EAAkB,EAAlB,EAAsBC,IAAtB,EAAV;;AACA,UAAMC,QAAQ,uBAAaH,CAAb,CAAd;AACA,UAAMI,OAAO;AACXD,WADW;AAEXE,eAASN;AAFE,KAAb;AAIAJ,MAAEW,IAAF,CAAOF,IAAP;AACD;;AACD,SAAOT,CAAP;AACD,CAnBM;;;eAqBQR,W","sourcesContent":["import { extractProps } from './lib'\nimport { attributesRe } from './lib/res'\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\n/**\n * Extract member elements from an XML string. Numbers and booleans will be parsed into their JS types.\n * @param {string} tag Which tag to extract, e.g., `div`.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n<html>\n  <div id=\"1\" class=\"test\" contenteditable>\n    Hello World\n  </div>\n</html>\n`\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nexport const extractTags = (tag, string) => {\n  const end1 = /\\s*\\/>/\n  const end2 = new RegExp(`>([\\\\s\\\\S]+?)?</${tag}>`)\n  const re = new RegExp(`<${tag}${attributesRe.source}?(?:${end1.source}|${end2.source})`, 'gu')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string))) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c,\n    }\n    r.push(item)\n  }\n  return r\n}\n\nexport default extractTags\n"],"file":"index.js"}