{"version":3,"sources":["../../src/lib/index.js"],"names":["getPropValue","val","test","parseInt","extractProps","s","o","re","RegExp","attributeRe","source","replace","match","name","value","v","undefined"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,eAAgBC,GAAD,IAAS;AAC5B,MAAIA,OAAO,MAAX,EAAmB,OAAO,IAAP;AACnB,MAAIA,OAAO,OAAX,EAAoB,OAAO,KAAP;;AACpB,MAAI,QAAQC,IAAR,CAAaD,GAAb,CAAJ,EAAuB;AACrB,WAAOE,SAASF,GAAT,EAAc,EAAd,CAAP;AACD;;AACD,SAAOA,GAAP;AACD,CAPD;AASA;;;;;;AAIO,MAAMG,eAAgBC,CAAD,IAAO;AACjC,QAAMC,IAAI,EAAV;AACA,QAAMC,KAAK,IAAIC,MAAJ,CAAWC,iBAAYC,MAAvB,EAA+B,IAA/B,CAAX;AACAL,IAAEM,OAAF,CAAUJ,EAAV,EAAc,CAACK,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;AACpC,UAAMC,IAAID,UAAUE,SAAV,GAAsB,IAAtB,GAA6BF,KAAvC;AACA,UAAMb,MAAMD,aAAae,CAAb,CAAZ;AACAT,MAAEO,IAAF,IAAUZ,GAAV;AACD,GAJD;AAKA,SAAOK,CAAP;AACD,CATM","sourcesContent":["import { attributeRe } from './res'\n\nconst getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\n/**\n * Parse the arguments part of an XML element\n * @param {string} s String to extract attributes from\n */\nexport const extractProps = (s) => {\n  const o = {}\n  const re = new RegExp(attributeRe.source, 'gu')\n  s.replace(re, (match, name, value) => {\n    const v = value === undefined ? true : value\n    const val = getPropValue(v)\n    o[name] = val\n  })\n  return o\n}\n"],"file":"index.js"}