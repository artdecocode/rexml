{"version":3,"sources":["../../src/lib/res.js"],"names":["nameRe","valRe","attributeRe","RegExp","source","ar","replace","attributesRe"],"mappings":";;;;;;AAAA,MAAMA,SAAS,yofAAf;AACA,MAAMC,QAAQ,+BAAd;AAEO,MAAMC,cAAc,IAAIC,MAAJ,CAAY,IAAGH,OAAOI,MAAO,gBAAeH,MAAMG,MAAO,IAAzD,EAA8D,GAA9D,CAApB;;AAEP,MAAMC,KAAKH,YAAYE,MAAZ,CAAmBE,OAAnB,CAA2B,OAA3B,EAAoC,MAApC,CAAX,C,CAAuD;;AAEvD;;;;AAGO,MAAMC,eAAe,IAAIJ,MAAJ,CAAY,WAAUE,EAAG,SAAzB,EAAmC,GAAnC,CAArB","sourcesContent":["const nameRe = /[\\p{L}_][\\p{L}.\\d_-]*/u\nconst valRe = /(?:\"([\\s\\S]*?)\"|'([\\s\\S]*?)')/\n\nexport const attributeRe = new RegExp(`(${nameRe.source})(?:\\\\s*=\\\\s*${valRe.source})?`, 'u')\n\nconst ar = attributeRe.source.replace(/\\(\\[/g, '(?:[') // don't need to capture\n\n/**\n * This regex will match all attributes as a string inside of element, e.g., matching `<el attr=\"abc\" bool/>` will result in `attr=\"abc\" bool`.\n */\nexport const attributesRe = new RegExp(`\\\\s*((?:${ar}\\\\s*)*)`, 'u')\n"],"file":"res.js"}